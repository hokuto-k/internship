import maf
import maflib.util
import os
import random
import mocha.net
import subprocess
import shutil
import Image

def options(opt):
	pass

def configure(conf):
	pass

def build(exp): 
	bmvc_dir = "/home/hokutokagaya/caffe/examples/BMVC2009/"
	dataset_original = bmvc_dir + "data_original/"
	dataset_dir = bmvc_dir + "data_resized2/"

	# Resize
	exp(source=dataset_original,
		target=dataset_dir,
		parameters=[{"resize_size":32}],
		rule=resize_images()
		)

	# Make datasets available for convert_imageset
	exp(source=dataset_dir,
		target=["train.txt", "test.txt"],
		parameters=[{"training_number":1200}],
		rule=make_lists()
		)

	exp(source=["train.txt"],
		target="train_leveldb",
		rule='GLOG_logtostderr=1 convert_imageset.bin / ${SRC[0].abspath()} ${TGT} 1')

	exp(source=["test.txt"],
		target="test_leveldb",
		rule='GLOG_logtostderr=1 convert_imageset.bin / ${SRC[0].abspath()} ${TGT} 1')

	exp(source="train_leveldb",
		target="mean.binaryproto",
		rule="compute_image_mean.bin ${SRC} ${TGT}")

	exp(source=["base.prototxt", "train_leveldb", "mean.binaryproto"],
		target="train_base.prototxt",
		rule=mocha.net.configure_data_layer(batchsize=256))

	exp(source=["train_base.prototxt", "loss.prototxt"],
		target="train.prototxt",
		rule="cat ${SRC} > ${TGT}")

	exp(source=["base.prototxt", "test_leveldb", "mean.binaryproto"],
		target="test_base.prototxt",
		rule=mocha.net.configure_data_layer(batchsize=275))

	exp(source=["test_base.prototxt", "loss_and_ac.prototxt"],
		target="test.prototxt",
		rule="cat ${SRC} > ${TGT}")

	exp(source='train.prototxt test.prototxt',
	            target='solver.prototxt',
	            parameters=[{
	                'base_lr': 0.001,
	                'momentum': 0.9,
	                'weight_decay': 0.004,
	                'lr_policy': "step",
	                'gamma': 0.1,
	                'stepsize': 2000,
	                'max_iter': 6000,
	                'snapshot': 1000,
	                # 'snapshot_prefix': 'bmvc2009'
	            }],
	            rule=mocha.net.create_solver(
	                test_iter=1, test_interval=100, display=50))

	snapshot_name = "bmvc_iter_6000"

	# exp(source="solver.prototxt",
	# 	target=["log.txt", ]
	# 	rule="GLOG_logtostderr=1 train_net.bin ${SRC} 2> ${TGT}")

	exp(source="solver.prototxt",
		target=["log.txt", "snapshots"],
		rule=caffe_train())


	# exp(source="snapshots",
	# 	target="result.txt",
	# 	rule="")

	
	
@maflib.util.rule
def caffe_train(task):
	output_dir = task.outputs[1].abspath()

	try:
		os.makedirs(output_dir)
	except:
		pass

	f = open(task.inputs[0].abspath(), "r")
	base_solver = f.read()
	f.close()

	solver = output_dir + "/solver.prototxt"
	f = open(solver, "w")
	f.write(base_solver)
	f.write("snapshot_prefix: \"%s/\" \n" % output_dir)
	f.close()

	envs = dict(os.environ)
	envs["GLOG_logtostderr"] = str(1)


	subprocess.check_call(["/home/hokutokagaya/caffe/distribute/bin/train_net.bin", solver], env=envs,
		stderr=open(task.outputs[0].abspath(), "w"))



@maflib.util.rule
def make_lists(task):

	#param
	pre_file_list = []
	tr_list = []
	val_list = []
	test_list = []
	num = 0

	path = task.inputs[0].abspath()
	tr = task.parameter["training_number"]
	
	for root, dirs, files in os.walk(path):
		for file_ in files:
			pre_file_list.append(file_)

	random.shuffle(pre_file_list)

	for file_ in pre_file_list:
		print file_
		angle = int(file_[9:12])
		class_num = angle / 45	
		if num < tr:
			tr_list.append([os.path.join(path, file_), class_num])
		else:
			test_list.append([os.path.join(path, file_), class_num])
		num += 1	

	f_train = open(task.outputs[0].abspath(), 'w')
	# f_val = open("val.txt", 'w')
	f_test = open(task.outputs[1].abspath(), 'w')

	for instance in tr_list:
		f_train.write(instance[0] + " " + str(instance[1]) + "\n")

	# for instance in val_list:
	# 	f_val.write(instance[0] + " " + str(instance[1]) + "\n")

	for instance in test_list:
		f_test.write(instance[0] + " " + str(instance[1]) + "\n")


@maflib.util.rule
def resize_images(task):
	i = 0
	path = task.inputs[0].abspath()

	#指定先ディレクトリがなければ作成
	dst_dir = task.outputs[0].abspath()
	if os.path.isdir(dst_dir) == False:
		os.makedirs(dst_dir)

	size = task.parameter['resize_size']
	for root, dirs, files in os.walk(path):
		for file in files:
			root2, ext = os.path.splitext(file)
			if ext == '.jpg' or ext == '.JPG' or ext == '.png' or ext == '.PNG':
				try:
					img = Image.open(os.path.join(root, file))
				except:
					print str(file) + "can't open!"
					continue

				if img.mode != "RGB":
					img = img.convert("RGB")
				img.resize((size, size)).save(dst_dir+"/"+file) 

				#print os.path.join(root, file)
				i += 1
				if i % 100 == 0:
					print str(i) + "now.."
